unsigned long keyPrevMillis = 0;
const unsigned long keySampleIntervalMs = 25;
byte longKeyPressCountMax = 80;    // 80 * 25 = 2000 ms
byte longKeyPressCount = 0;
unsigned long TimerA = 1500;
byte prevKeyState = HIGH;         
const byte keyPin = 8;            
const int LED = 6;
const int LEDdetect = 5;
const int RELAY = 7;
volatile long last = 0;
volatile bool turnOff = false;
volatile long offAt = 0;
int BUTTONstate = 0;
int LEDstate = 0;

void shortKeyPress() {
  LEDstate = digitalRead(LEDdetect);
  if (LEDstate == HIGH)
  {
    digitalWrite(RELAY, LOW);
  } 
  else{
    digitalWrite(RELAY, HIGH);
  }
}


void longKeyPress() {
        if( (millis() - last ) > 20 ) //if at least 20 ms has passed since last press, this is not a dup
    {
        last = millis(); //note the time, for ignoring duplicate presses
        turnOff = true;
        offAt = millis() + 5000; //save a variable of now + 5 seconds
        digitalWrite(LED, HIGH);//turn on
    }
}


void keyPress() {
}

void keyRelease() {
    Serial.println("key release");
    if (longKeyPressCount >= longKeyPressCountMax) {
        longKeyPress();
    }
    else {
       shortKeyPress();
    }
}


void setup() {
    Serial.begin(115200);
    pinMode(keyPin, INPUT_PULLUP);
    pinMode(LED, OUTPUT);
    pinMode(LEDdetect, INPUT);
    pinMode(RELAY, OUTPUT);
    attachInterrupt(0, longKeyPress, FALLING);
    
}


void loop() {
    // key management section
    if (millis() - keyPrevMillis >= keySampleIntervalMs) {
        keyPrevMillis = millis();
        
        byte currKeyState = digitalRead(keyPin);
        
        if ((prevKeyState == LOW) && (currKeyState == HIGH)) {
            keyPress();
        }
        else if ((prevKeyState == HIGH) && (currKeyState == LOW)) {
            keyRelease();
        }
        else if (currKeyState == HIGH) {
            longKeyPressCount++;
        }
        
        prevKeyState = currKeyState;
    }
   if(turnOff)
  {
   if(millis() >= offAt)
    {
       digitalWrite(LED, LOW); 
    } 
  }
  BUTTONstate = digitalRead(keyPin);
  if (BUTTONstate == HIGH)
  {
    shortKeyPress();
  } 
  else{
    digitalWrite(RELAY, LOW);
  } 
}
